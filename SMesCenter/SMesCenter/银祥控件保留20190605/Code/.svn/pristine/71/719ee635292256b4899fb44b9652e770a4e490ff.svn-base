<ehcache>

	<!--
		Sets the path to the directory where cache .data files are created. If
		the path is a Java System Property it is replaced by its value in the
		running VM. Subdirectories can be specified below the property e.g.
		java.io.tmpdir/one The following properties are translated: user.home
		- User's home directory user.dir - User's current working directory
		java.io.tmpdir - Default temp file path
	-->
	<diskStore path="user.dir" />

	<!--
		Specifies a CacheManagerEventListenerFactory which will be used to
		create a CacheManagerPeerProvider, which is notified when Caches are
		added or removed from the CacheManager. The attributes of
		CacheManagerEventListenerFactory are: - class - a fully qualified
		factory class name - properties - comma separated properties having
		meaning only to the factory. Sets the fully qualified class name to be
		registered as the CacheManager event listener. The events include: -
		adding a Cache - removing a Cache Callbacks to listener methods are
		synchronous and unsynchronized. It is the responsibility of the
		implementer to safely handle the potential performance and thread
		safety issues depending on what their listener is doing. If no class
		is specified, no listener is created. There is no default.
	-->
	<cacheManagerEventListenerFactory
		class="" properties="" />


	<!--
		(Enable for distributed operation) Specifies a
		CacheManagerPeerProviderFactory which will be used to create a
		CacheManagerPeerProvider, which discovers other CacheManagers in the
		cluster. The attributes of cacheManagerPeerProviderFactory are: -
		class - a fully qualified factory class name - properties - comma
		separated properties having meaning only to the factory. Ehcache comes
		with a built-in RMI-based distribution system with two means of
		discovery of CacheManager peers participating in the cluster: -
		automatic, using a multicast group. This one automatically discovers
		peers and detects changes such as peers entering and leaving the group
		- manual, using manual rmiURL configuration. A hardcoded list of peers
		is provided at configuration time. Configuring Automatic Discovery:
		Automatic discovery is configured as per the following example:
		<cacheManagerPeerProviderFactory
		class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
		properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1,
		multicastGroupPort=4446"/> Valid properties are: - peerDiscovery
		(mandatory) - specify "automatic" - multicastGroupAddress (mandatory)
		- specify a valid multicast group address - multicastGroupPort
		(mandatory) - specify a dedicated port for the multicast hearbeat
		traffic Configuring Manual Discovery: Manual discovery is configured
		as per the following example: <cacheManagerPeerProviderFactory
		class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
		properties="peerDiscovery=manual,
		rmiUrls=//server1:40000/sampleCache1|//server2:40000/sampleCache1|//server1:40000/sampleCache2|//server2:40000/sampleCache2"/>

		Valid properties are: - peerDiscovery (mandatory) - specify "manual" -
		rmiUrls (mandatory) - specify a pipe separated list of rmiUrls, in the
		form //hostname:port The hostname is the hostname of the remote
		CacheManager peer. The port is the listening port of the
		RMICacheManagerPeerListener of the remote CacheManager peer.
	-->
	<!--
		<cacheManagerPeerProviderFactory
		class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
	-->
	<!--
		properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1,
		multicastGroupPort=4446"/>
	-->


	<!--
		(Enable for distributed operation) Specifies a
		CacheManagerPeerListenerFactory which will be used to create a
		CacheManagerPeerListener, which listens for messages from cache
		replicators participating in the cluster. The attributes of
		cacheManagerPeerListenerFactory are: - class - a fully qualified
		factory class name - properties - comma separated properties having
		meaning only to the factory. Ehcache comes with a built-in RMI-based
		distribution system. The listener component is
		RMICacheManagerPeerListener which is configured using
		RMICacheManagerPeerListenerFactory. It is configured as per the
		following example: <cacheManagerPeerListenerFactory
		class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
		properties="hostName=fully_qualified_hostname_or_ip, port=40001,
		socketTimeoutMillis=2000"/> Valid properties are: - hostName
		(optional) - the hostName of the host the listener is running on.
		Specify where the host is multihomed and you want to control the
		interface over which cluster messages are received. - port (mandatory)
		- the port the listener listens on. - socketTimeoutMillis (optional) -
		the number of seconds client sockets will wait when sending messages
		to this listener until they give up. By default this is 120s.
	-->
	<!--
		<cacheManagerPeerListenerFactory
		class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
	-->
	<!--properties="port=40001, socketTimeoutMillis=2000"/>-->



	<!--
		Default Cache configuration. These will applied to caches
		programmatically created through the CacheManager. The following
		attributes are required: maxElementsInMemory - Sets the maximum number
		of objects that will be created in memory eternal - Sets whether
		elements are eternal. If eternal, timeouts are ignored and the element
		is never expired. overflowToDisk - Sets whether elements can overflow
		to disk when the in-memory cache has reached the maxInMemory limit.

		The following attributes are optional: timeToIdleSeconds - Sets the
		time to idle for an element before it expires. i.e. The maximum amount
		of time between accesses before an element expires Is only used if the
		element is not eternal. Optional attribute. A value of 0 means that an
		Element can idle for infinity. The default value is 0.
		timeToLiveSeconds - Sets the time to live for an element before it
		expires. i.e. The maximum time between creation time and when an
		element expires. Is only used if the element is not eternal. Optional
		attribute. A value of 0 means that and Element can live for infinity.
		The default value is 0. diskPersistent - Whether the disk store
		persists between restarts of the Virtual Machine. The default value is
		false. diskExpiryThreadIntervalSeconds- The number of seconds between
		runs of the disk expiry thread. The default value is 120 seconds.
		memoryStoreEvictionPolicy - Policy would be enforced upon reaching the
		maxElementsInMemory limit. Default policy is Least Recently Used
		(specified as LRU). Other policies available - First In First Out
		(specified as FIFO) and Less Frequently Used (specified as LFU) Cache
		elements can also contain zero or more cacheEventListenerFactory
		elements.
	-->

	<defaultCache maxElementsInMemory="10000" eternal="false"
		timeToIdleSeconds="120" timeToLiveSeconds="120" overflowToDisk="true"
		diskPersistent="false" diskExpiryThreadIntervalSeconds="120"
		memoryStoreEvictionPolicy="LRU" />

	<!--
		Predefined caches. Add your cache configuration settings here. If you
		do not have a configuration for your cache a WARNING will be issued
		when the CacheManager starts The following attributes are required:

		name - Sets the name of the cache. This is used to identify the cache.
		It must be unique. maxElementsInMemory - Sets the maximum number of
		objects that will be created in memory eternal - Sets whether elements
		are eternal. If eternal, timeouts are ignored and the element is never
		expired. overflowToDisk - Sets whether elements can overflow to disk
		when the in-memory cache has reached the maxInMemory limit. The
		following attributes are optional: timeToIdleSeconds - Sets the time
		to idle for an element before it expires. i.e. The maximum amount of
		time between accesses before an element expires Is only used if the
		element is not eternal. Optional attribute. A value of 0 means that an
		Element can idle for infinity. The default value is 0.
		timeToLiveSeconds - Sets the time to live for an element before it
		expires. i.e. The maximum time between creation time and when an
		element expires. Is only used if the element is not eternal. Optional
		attribute. A value of 0 means that and Element can live for infinity.
		The default value is 0. diskPersistent - Whether the disk store
		persists between restarts of the Virtual Machine. The default value is
		false. diskExpiryThreadIntervalSeconds- The number of seconds between
		runs of the disk expiry thread. The default value is 120 seconds.
		memoryStoreEvictionPolicy - Policy would be enforced upon reaching the
		maxElementsInMemory limit. Default policy is Least Recently Used
		(specified as LRU). Other policies available - First In First Out
		(specified as FIFO) and Less Frequently Used (specified as LFU) Cache
		elements can also contain cacheEventListenerFactory elements which
		consist of a factory class and properties. Each cache that will be
		distributed needs to set a cache event listener which then replicates
		messages to the other CacheManager peers. For the built-in RMI
		implementation this is done by adding a cacheEventListenerFactory
		element of type RMICacheReplicatorFactory to each distributed cache's
		configuration as per the following example: <cacheEventListenerFactory
		class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
		properties="replicateAsynchronously=true, replicatePuts=true,
		replicateUpdates=true, replicateUpdatesViaCopy=true,
		replicateRemovals=true "/> The RMICacheReplicatorFactory factory
		recognises the following properties: * replicatePuts=true | false -
		whether new elements placed in a cache are replicated to others.
		Defaults to true. * replicateUpdates=true | false - whether new
		elements which override an element already existing with the same key
		are replicated. Defaults to true. * replicateRemovals=true - whether
		element removals are replicated. Defaults to true. *
		replicateAsynchronously=true | false - whether replications are
		asynchronous (true) or synchronous (false). Defaults to true. *
		replicateUpdatesViaCopy=true | false - whether the new elements are
		copied to other caches (true), or whether a remove message is sent.
		Defaults to true.
	-->

	<!--
		Sample cache named sampleCache1 This cache contains a maximum in
		memory of 10000 elements, and will expire an element if it is idle for
		more than 5 minutes and lives for more than 10 minutes. If there are
		more than 10000 elements it will overflow to the disk cache, which in
		this configuration will go to wherever java.io.tmp is defined on your
		system. On a standard Linux system this will be /tmp"
	-->


	<!--
		Place configuration for your caches following. Make sure you comment
		out the above samples
	-->

	<cache name="sessionCache" maxElementsInMemory="10000" eternal="false"
		overflowToDisk="false" timeToIdleSeconds="86400" timeToLiveSeconds="0"
		memoryStoreEvictionPolicy="LFU">
		<cacheEventListenerFactory
			class="com.smes.mw.protocol.cache.CacheListenerFactory" properties="class=com.smes.mw.protocol.cache.SessionCacheListener" />
	</cache>

	<cache name="transactionCache" maxElementsInMemory="10000"
		eternal="false" overflowToDisk="false" timeToIdleSeconds="300"
		timeToLiveSeconds="360" memoryStoreEvictionPolicy="LFU">
		<cacheEventListenerFactory
			class="com.smes.mw.protocol.cache.CacheListenerFactory" properties="class=com.smes.mw.protocol.cache.TransactionCacheListener" />
	</cache>


	<cache name="statisticsCache" maxElementsInMemory="10000"
		eternal="false" overflowToDisk="true" timeToIdleSeconds="720"
		timeToLiveSeconds="720" memoryStoreEvictionPolicy="LFU">
	</cache>


</ehcache>
