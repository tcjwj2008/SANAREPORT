using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SMes.Core.Config;
using SMes.Core.AppObj;
using System.Collections;
using SMes.Core.Utility;
using System.Net;
using System.IO;

namespace SMes.Core.Service
{
    public class Connection
    {
        private ConnectionConfig config;

        public ConnectionConfig Config
        {
            get { return config; }
        }
        public Encoding encoding;
        public string sessionId = null;
        public string userId = null;
        public static string PROTOCOL_VERSION = "2.0";
        public static Encoding DEFAULT_CONTENT_ENCODING = System.Text.Encoding.UTF8;

        /// <summary>
        /// 使用存放系统初始化参数的ConnectionConfig类来初始化Connection类的新的空实例
        /// </summary>
        /// <param name="config"></param>
        public Connection(ConnectionConfig config)
        {
            this.config = config;
        }

        /// <summary>
        /// 新建Transaction类
        /// </summary>
        /// <returns>返回事务Transaction类</returns>
        public Transaction CreateTransaction()
        {
            //create transaction and return;
            return new Transaction(this);
        }

        /// <summary>
        /// 执行不返回结果集的数据库操作
        /// </summary>
        /// <param name="cmd">存放SQL语句的Command对象</param>
        /// <param name="cmdType">执行的类型</param>
        /// <param name="txn">事务对象</param>  
        public void ExecuteNonQuery(Command cmd, int cmdType, Transaction txn)
        {
            Execute(cmd, cmdType, txn);
        }


        /// <summary>
        /// 执行返回结果集的数据库查询操作
        /// </summary>
        /// <param name="cmd">存放SQL语句的Command对象</param>
        /// <param name="cmdType">执行的类型</param>
        /// <param name="txn">事务对象</param>  
        /// <returns>返回对结果集封装过的McsDataReader对象</returns>
        public SMesDataReader ExecuteReader(Command cmd, int cmdType, Transaction txn)
        {
            return Execute(cmd, cmdType, txn);
        }


        /// <summary>
        /// 执行事务的提交
        /// </summary>
        public void Commit(Transaction txn)
        {
            doTransaction(txn,true);
        }

        /// <summary>
        /// 执行事务的回滚
        /// </summary>
        public void Rollback(Transaction txn)
        {
            doTransaction(txn,false);
        }

        /// <summary>
        /// 根据事务的执行类型来执行事务
        /// </summary>
        /// <param name="txn">事务对象</param>
        /// <param name="type">事务执行类型:commit为提交,rollback为回滚</param>
        private void doTransaction(Transaction txn, bool type)
        {
            if (txn == null || txn.TransactionId == null)
            {
                return;
            }

            Command cmd = new Command();
            cmd.Add("need_transaction", "true");
            if (type)
            {
                cmd.Add("transaction_type", "commit");
            }
            else
            {
                cmd.Add("transaction_type", "rollback");
            }

            ExecuteReader(cmd, Command.TRANSACTION, txn);

        }

        private string GetDataBaseStr(DataBaseType type)
        {
            if (DataBaseAccess.DataBaseAcType == DataBaseType.NONE && !string.IsNullOrEmpty(config.DatasourceName))
            {
                return config.DatasourceName;
            }
            if (DataBaseAccess.DataBaseAcType == DataBaseType.CHIP)
            {
                return "CHIP";
            }
            else if (DataBaseAccess.DataBaseAcType == DataBaseType.CHIPDM)
            {
                return "CHIPDM";
            }
            else if (DataBaseAccess.DataBaseAcType == DataBaseType.EPI)
            {
                return "EPI";
            }
            else if (DataBaseAccess.DataBaseAcType == DataBaseType.EPIDM)
            {
                return "EPIDM";
            }

            return "SMES";
        }

        /// <summary>
        /// 执行数据库操作
        /// </summary>
        /// <param name="cmd">存放SQL语句的Command对象</param>
        /// <param name="cmdType">执行的类型</param>
        /// <param name="args"></param>
        /// <param name="txn">事务对象</param>
        /// <returns>返回数据库执行的结果集</returns>
        private SMesDataReader Execute(Command cmd, int cmdType, Transaction txn)
        {
            Command clone = (Command)cmd.Clone();
            try
            {
                clone.Add("DBNAME", GetDataBaseStr(DataBaseAccess.DataBaseAcType));

                if (cmdType == Command.SQL_CALL)
                {
                    clone.Add("call_type", "sql_call");
                    clone.Add("statement", clone.statement);
                }
                else if (cmdType == Command.TRANSACTION)
                {
                    clone.Add("call_type", "transaction");
                }
                else
                {
                    throw new SMesApplicationException(SystemExceptionList.ID_UNKNOWN, "unknown call type");
                }

                if (!string.IsNullOrEmpty(userId))
                {
                    clone.Add("user_id", userId);   
                }


                if (!string.IsNullOrEmpty(sessionId))
                {
                    clone.Add("session_id", sessionId);
                }

                if (txn != null)
                {
                    clone.Add("transaction_id", txn.TransactionId);
                }
                clone.Add("identity", getIdentity());


                //string url = buildUrl(clone);

                ASCIIEncoding encoding = new ASCIIEncoding();
                string url = buildUrl(clone);
                int index = url.IndexOf("&content=");
                string contentData = url.Substring(index + 1);
                url = url.Substring(0, index);
                //string[] urlInfo = url.Split('?');
                byte[] data = encoding.GetBytes(contentData);
                SMesDataReader reader = Send(url, data);

                return reader;
            }
            catch (SMesSystemException mse)
            {
                throw mse;
            }
            catch (Exception e)
            {
                throw new SMesSystemException(SystemExceptionList.ID_UNKNOWN, e.ToString());
            }
        }

        /// <summary>
        /// 拼写向服务器发送请求的Url地址
        /// </summary>
        /// <param name="cmd">Command对象</param>
        /// <returns>返回发送连接的Url值</returns>
        private string buildUrl(Command cmd)
        {
            /*
             {0}: host
             {1}: port
             {2}: requestAccepter
             {3}: version
             {4}: encoding
             {5}: content 
            */
            string urlTemplate = "http://{0}:{1}{2}?version={3}&encoding={4}&content={5}";
            string content;
            StringBuilder sb = new StringBuilder();

            Encoding encoding = (this.encoding == null ? DEFAULT_CONTENT_ENCODING : this.encoding);

            sb.Append(Encode("dummy", "dummy", encoding));

            if (cmd != null && cmd.Count > 0)
            {
                IDictionaryEnumerator enumerator = cmd.GetEnumerator();

                while (enumerator.MoveNext())
                {
                    sb.Append("&" + Encode((string)enumerator.Key, (string)enumerator.Value, encoding));
                }
            }
            content = Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(sb.ToString()));
            content = HttpUtility.UrlEncode(content, encoding);

            string url;
            url = string.Format(urlTemplate, config.Host, config.Port, config.RequestAccepter, PROTOCOL_VERSION, encoding.WebName, content);

            return url;
        }

        /// <summary>
        /// 对执行的SQL语句进行编码
        /// </summary>
        /// <param name="key">SQL语句</param>
        /// <param name="keyValue">执行类型</param>
        /// <param name="encoding">编码格式</param>
        /// <returns>返回编码过请求服务器处理的URL地址</returns>
        private string Encode(string key, string keyValue, Encoding encoding)
        {
            return HttpUtility.UrlEncode(key, encoding) + "=" + HttpUtility.UrlEncode(keyValue, encoding);
        }

        /// <summary>
        /// 服务器通过请求地址返回SQL执行的结果集
        /// </summary>
        /// <param name="url">向服务器发送的请求地址</param>
        /// <returns>返回从数据库中得到的结果集</returns>
        private SMesDataReader Send(string url)
        {
            SMesDataReader mesReader = null;
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                //request.AllowAutoRedirect = true;
                //request.KeepAlive = false;
                request.Proxy = null;
                if (config.Timeout > 0)
                {
                    request.Timeout = config.Timeout;
                }
                else
                {
                    request.Timeout = config.GlobalTimeout;
                }
                request.Method = "POST";

                HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                Stream stream = response.GetResponseStream();
                StreamReader reader = new StreamReader(stream, System.Text.Encoding.ASCII);
                string buffer = reader.ReadToEnd();

                reader.Close();
                //stream.Close();
                response.Close();

                mesReader = SMesDataReader.Marshal(buffer);

                if (mesReader.resultType == SMesDataReader.RESULT_APPLICATION_EXECEPTION)
                {
                    mesReader.Read();
                    throw new SMesApplicationException(mesReader.GetInt(0), mesReader.GetString(1));
                }
                else if (mesReader.resultType == SMesDataReader.RESULT_SYSTEM_EXECEPTION)
                {
                    mesReader.Read();
                    throw new SMesSystemException(mesReader.GetInt(0), mesReader.GetString(1));
                }
            }
            catch (Exception)
            {

            }

            return mesReader;
        }

        private SMesDataReader Send(string url, byte[] data)
        {
            SMesDataReader mcsReader = null;
            //try
            //{
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            //request.AllowAutoRedirect = true;
            //request.KeepAlive = false;
            request.Proxy = null;
            if (config.Timeout > 0)
            {
                request.Timeout = config.Timeout;
            }
            else
            {
                request.Timeout = config.GlobalTimeout;
            }
            request.Method = "POST";
            request.Accept = "text/html, application/xhtml+xml, */*";
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = data.Length;

            Stream newStream = request.GetRequestStream();
            newStream.Write(data, 0, data.Length);
            newStream.Close();

            HttpWebResponse response = (HttpWebResponse)request.GetResponse();

            Stream stream = response.GetResponseStream();
            StreamReader reader = new StreamReader(stream, System.Text.Encoding.ASCII);
            string buffer = reader.ReadToEnd();

            reader.Close();

            response.Close();

            mcsReader = SMesDataReader.Marshal(buffer);

            if (mcsReader.resultType == SMesDataReader.RESULT_APPLICATION_EXECEPTION)
            {
                mcsReader.Read();
                throw new SMesApplicationException(mcsReader.GetInt(0), mcsReader.GetString(1));
            }
            else if (mcsReader.resultType == SMesDataReader.RESULT_SYSTEM_EXECEPTION)
            {
                mcsReader.Read();
                throw new SMesSystemException(mcsReader.GetInt(0), mcsReader.GetString(1));
            }
            //}
            //catch (Exception)
            //{

            //}


            return mcsReader;
        }

        private string getIdentity()
        {
            return "1988";
        }


    }
}
